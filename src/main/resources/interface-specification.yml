openapi: 3.0.3
info:
  title: Specific Provisioner Micro Service
  description: 'Microservice responsible to handle provisioning and access control requests for one or more data product components.'
  version: '2.1.0'
tags:
  - name: SpecificProvisioner
    description: All the provisioning related operations
paths:
  /v1/provision:
    post:
      tags:
        - SpecificProvisioner
      summary: Deploy a data product starting from its descriptor
      operationId: provision
      requestBody:
        description: A provisioning request descriptor wrapped as a string into a simple object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningRequest'
        required: true
      responses:
        200:
          description: It synchronously returns the request result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningStatus'
        202:
          description: If successful returns a provisioning deployment task token that can be used for polling the request status
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /v1/provision/{token}/status:
    get:
      tags:
        - SpecificProvisioner
      summary: Get the status for a provisioning request
      operationId: getStatus
      parameters:
        - name: token
          in: path
          description: token that identifies the request
          required: true
          schema:
            type: string
      responses:
        200:
          description: The request status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvisioningStatus"
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /v1/validate:
    post:
      tags:
        - SpecificProvisioner
      summary: Validate a provisioning request
      operationId: validate
      requestBody:
        description: A provisioning request descriptor wrapped as a string into a simple object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningRequest'
        required: true
      responses:
        200:
          description: It synchronously returns a specific reply containing the validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /v1/unprovision:
    post:
      tags:
        - SpecificProvisioner
      summary: Undeploy a data product starting from its descriptor
      operationId: unprovision
      requestBody:
        description: A provisioning request descriptor wrapped as a string into a simple object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisioningRequest'
        required: true
      responses:
        200:
          description: It synchronously returns the request result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningStatus'
        202:
          description: If successful returns a provisioning deployment task token that can be used for polling the request status
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
  /v1/updateacl:
    post:
      tags:
        - SpecificProvisioner
      summary: Request the access to a specific provisioner component
      operationId: updateacl
      requestBody:
        description: An access request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAclRequest'
        required: true
      responses:
        200:
          description: It synchronously returns the access request response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisioningStatus'
        202:
          description: It synchronously returns the access request response
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        500:
          description: System problem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemError'
components:
  schemas:
    UpdateAclRequest:
      required:
        - refs
        - provisionInfo
      type: object
      properties:
        refs:
          type: array
          items:
            type: string
        provisionInfo:
          $ref: '#/components/schemas/ProvisionInfo'
    DescriptorKind:
      type: string
      enum: [ DATAPRODUCT_DESCRIPTOR, COMPONENT_DESCRIPTOR, DATAPRODUCT_DESCRIPTOR_WITH_RESULTS ]
    ProvisioningRequest:
      required:
        - descriptorKind
        - descriptor
      type: object
      properties:
        descriptorKind:
          $ref: '#/components/schemas/DescriptorKind'
        descriptor:
          type: string
          description: A provisioning request in yaml format
    ProvisioningStatus:
      required:
        - status
        - result
      properties:
        status:
          type: string
          enum: [ RUNNING, COMPLETED, FAILED ]
        result:
          type: string
    ValidationResult:
      required:
        - valid
      type: object
      properties:
        valid:
          type: boolean
        error:
          $ref: '#/components/schemas/ValidationError'
    ProvisionInfo:
      required:
        - request
        - result
      type: object
      properties:
        request:
          type: string
        result:
          type: string
    ValidationError:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          deprecated: true
          items:
            type: string
        userMessage:
          type: string
          description: User-readable message to be displayed
        input:
          type: string
          description: Optional field to include the file or descriptor that raised the error
        inputErrorField:
          type: string
          description: Optional field to include the field path (in dot format) that raised the error
        moreInfo:
          $ref: "#/components/schemas/ErrorMoreInfo"
    SystemError:
      required:
        - error
      type: object
      properties:
        error:
          type: string
          deprecated: true
        userMessage:
          type: string
          description: User-readable message to be displayed
        input:
          type: string
          description: Optional field to include the file or descriptor that raised the error
        inputErrorField:
          type: string
          description: Optional field to include the field path (in dot format) that raised the error
        moreInfo:
          $ref: "#/components/schemas/ErrorMoreInfo"
    ErrorMoreInfo:
      required:
        - problems
        - solutions
      type: object
      description: Object that will include the more in-depth, specific information about the error
      properties:
        problems:
          type: array
          description: "Array of possible multiple problems: i.e. multiple validations failed"
          items:
            type: string
        solutions:
          type: array
          description: Array of possible solutions that the developer gives to the user to solve the issue
          items:
            type: string
