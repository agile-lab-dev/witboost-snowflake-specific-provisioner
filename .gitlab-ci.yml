include:
  - project: 'AgileFactory/Witboost.Mesh/witboost.Mesh.CI'
    ref: 'main'
    file: 'common/witboost.helm.gitlab-ci.yml'
  - project: 'AgileFactory/Witboost.Mesh/witboost.Mesh.CI'
    ref: 'main'
    file: 'common/witboost.downstream.gitlab-ci.yml'

image: ubuntu:20.04

before_script:
  - apt-get update  -yqq
  - DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
  - apt-get install -yqq openjdk-17-jdk-headless
  - apt-get install -yqq gpg
  - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
  - mkdir -p /root/.gnupg
  - gpg --recv-keys --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/scalasbt-release.gpg --keyserver hkp://keyserver.ubuntu.com:80 2EE0EA64E40A89B84B2DF73499E82A75642AC823
  - chmod 644 /etc/apt/trusted.gpg.d/scalasbt-release.gpg
  - apt-get update  -yqq
  - apt-get install -yqq sbt

variables:
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy -Dsbt.ci=true"

cache:
  untracked: true
  paths:
    - "sbt-cache/ivy/cache"
    - "sbt-cache/boot"
    - "sbt-cache/sbtboot"
    - "sbt-cache/target"

stages:
  - setup
  - checkFormatting
  - test
  - build
  - package

setup:
  stage: setup
  extends: .witboost.helm.base-job
  cache: []
  before_script: []
  script:
    - !reference [.witboost.helm.clone-scripts, script]
    - !reference [.witboost.helm.get-version, script]
    - echo "VERSION=${VERSION}" >> vars.env
  artifacts:
    reports:
      dotenv: vars.env

witboost.helm.checks:
  stage: checkFormatting
  extends: .witboost.helm.base-job
  before_script: []
  cache: []
  script:
    - !reference [.witboost.helm.clone-scripts, script]
    - !reference [.witboost.helm.checks, script]
  variables:
    CHART_FOLDER: helm

checkFormatting:
  stage: checkFormatting
  script:
    - 'sbt scalafmtSbtCheck scalafmtCheckAll'

test:
  stage: test
  script:
    - apt-get install -yqq npm
    - npm install @openapitools/openapi-generator-cli -g
    - 'sbt clean generateCode coverage test multi-jvm:test coverageReport'

build:
  services:
    - docker:19.03.12-dind
  stage: build
  variables:
    DOCKER_HOST: tcp://docker:2375
  script: |
    apt-get install -yqq curl
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo   "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" |  tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update -yqq
    apt-get install -yqq docker-ce-cli
    apt-get install -yqq npm
    npm install @openapitools/openapi-generator-cli@2.7.0 -g
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    echo "VERSION: $VERSION"
    sbt clean generateCode compile k8tyGitlabCIPublish docker:publish

witboost.helm.deploy:
  stage: package
  before_script: []
  cache: []
  extends: .witboost.helm.deploy
  only:
    - master
    - tags
    - /(^release\/([0-9]+)\.([0-9]+))/